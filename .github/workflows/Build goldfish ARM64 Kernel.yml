# Build goldfish ARM64 kernel (clone android.googlesource, checkout given ref, build Image -> Image.gz, optional boot.img)
name: Build goldfish ARM64 Kernel

on:
  workflow_dispatch:
    inputs:
      kernel_repo:
        description: 'Kernel repo to clone (full git URL).'
        required: false
        default: 'https://android.googlesource.com/kernel/goldfish'
      commit:
        description: 'Commit/branch/tag to checkout (ref).'
        required: false
        default: '182a76ba7053af521e4c0d5fd62134f1e323191d'
      defconfig:
        description: 'defconfig to use (kernel config). Leave empty to auto-detect.'
        required: false
        default: ''
      use_clang:
        description: 'Set to "true" to build with clang (if supported).'
        required: false
        default: 'false'

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      ARCH: arm64
      CROSS_COMPILE: aarch64-linux-gnu-
      MAKEFLAGS: -j$(nproc)

    steps:
      - name: Checkout this workflow repo
        uses: actions/checkout@v4

      - name: Clone kernel repo
        run: |
          REPO="${{ github.event.inputs.kernel_repo }}"
          REF="${{ github.event.inputs.commit }}"
          echo "Cloning ${REPO} ..."
          rm -rf kernel-src
          git clone --depth=1 "${REPO}" kernel-src || git clone "${REPO}" kernel-src
          pushd kernel-src
          if [ -n "$REF" ]; then
            git fetch --all --tags || true
            if ! git checkout "$REF" 2>/dev/null; then
              git checkout --detach "$REF" || true
            fi
          fi
          echo "Checked kernel ref:"
          git rev-parse --verify HEAD
          git log -1 --oneline
          popd

      - name: Install build deps and toolchain
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential bc bison flex cpio device-tree-compiler libncurses-dev git
          sudo apt-get install -y gcc-aarch64-linux-gnu
          if [ "${{ github.event.inputs.use_clang }}" = "true" ]; then
            sudo apt-get install -y clang
          fi
          sudo apt-get install -y android-tools-adb android-tools-fastboot u-boot-tools || true

      - name: Detect defconfig and prepare build
        working-directory: kernel-src
        run: |
          set -e
          echo "Detecting available defconfig files..."
          AVAILABLE=$(git ls-files 'arch/*/configs/*' | sed 's|.*/configs/||' | sort -u || true)
          echo "Available defconfigs:"
          echo "$AVAILABLE" || true

          if [ -z "$AVAILABLE" ]; then
            echo "No defconfigs found under arch/*/configs. Listing arch/ directory:"
            ls -la arch || true
            echo "This kernel tree may not support ARCH=${ARCH}; consider changing ARCH to 'arm' or using a different branch."
            exit 1
          fi

          REQUESTED="${{ github.event.inputs.defconfig }}"
          echo "Requested defconfig: ${REQUESTED}"

          if [ -n "$REQUESTED" ] && echo "$AVAILABLE" | grep -x -q "$REQUESTED"; then
            CHOSEN="$REQUESTED"
            echo "Using requested defconfig: $CHOSEN"
          else
            CHOSEN=$(echo "$AVAILABLE" | grep -i goldfish | head -n1 || true)
            if [ -n "$CHOSEN" ]; then
              echo "Auto-detected goldfish defconfig: $CHOSEN"
            else
              CHOSEN=$(echo "$AVAILABLE" | grep -i virt | head -n1 || true)
              if [ -n "$CHOSEN" ]; then
                echo "Using virt fallback defconfig: $CHOSEN"
              else
                CHOSEN=$(echo "$AVAILABLE" | head -n1)
                echo "No goldfish/virt defconfig found; using first available: $CHOSEN"
              fi
            fi
          fi

          echo "FINAL_DEFCONFIG=$CHOSEN" >> $GITHUB_ENV
          echo "Detected/selected DEFCONFIG=$CHOSEN"

      - name: Run make defconfig and show config location
        working-directory: kernel-src
        run: |
          set -e
          echo "Using ARCH=${ARCH}"
          echo "Running make O=out ARCH=${ARCH} ${FINAL_DEFCONFIG}"
          if ! make O=out ARCH=${ARCH} ${FINAL_DEFCONFIG}; then
            echo "make ${FINAL_DEFCONFIG} failed. Available defconfigs were:"
            git ls-files 'arch/*/configs/*' | sed 's|.*/configs/||' | sort -u || true
            echo "Listing arch directory:"
            ls -la arch || true
            exit 2
          fi

      - name: Build kernel Image
        working-directory: kernel-src
        run: |
          set -e
          mkdir -p ../artifacts
          if [ "${USE_CLANG}" = "true" ]; then
            echo "Building with clang"
            make -j$(nproc) O=out ARCH=${ARCH} CC=clang Image || make -j2 O=out ARCH=${ARCH} CC=clang Image
          else
            echo "Building with cross gcc (${CROSS_COMPILE})"
            make -j$(nproc) O=out ARCH=${ARCH} CROSS_COMPILE=${CROSS_COMPILE} Image || make -j2 O=out ARCH=${ARCH} CROSS_COMPILE=${CROSS_COMPILE} Image
          fi
          if [ -f out/arch/arm64/boot/Image ]; then
            cp out/arch/arm64/boot/Image ../artifacts/Image
          else
            echo "ERROR: kernel Image not found at out/arch/arm64/boot/Image"
            ls -R out || true
            exit 2
          fi
          ls -l ../artifacts

      - name: Create Image.gz
        run: |
          mkdir -p artifacts
          gzip -n -9 -c artifacts/Image > artifacts/Image.gz
          ls -lh artifacts

      - name: (Optional) Build minimal ramdisk and mkbootimg -> boot.img
        if: always()
        run: |
          set -e
          mkdir -p work/ramdisk/root
          printf '%s\n' 'echo "Booted minimal ramdisk"' 'exec /bin/sh || exec /sbin/sh || true' > work/ramdisk/root/init
          chmod +x work/ramdisk/root/init
          (cd work/ramdisk/root && find . | cpio -o -H newc) | gzip -9 > work/ramdisk/ramdisk.cpio.gz
          if command -v mkbootimg >/dev/null 2>&1; then
            echo "Found mkbootimg, creating boot.img"
            mkbootimg --kernel artifacts/Image --ramdisk work/ramdisk/ramdisk.cpio.gz --output artifacts/boot.img || true
          else
            echo "mkbootimg not found; skipping boot.img generation."
          fi
          ls -l artifacts || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kernel-artifacts
          path: artifacts/*

      - name: Print final locations
        run: |
          echo "Artifacts uploaded: Image.gz (required), boot.img (optional if created)."
